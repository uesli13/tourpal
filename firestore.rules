// Enhanced Firestore configuration for optimal performance
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isGuide() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isGuide == true;
    }
    
    function isDraft() {
      return request.resource.data.status == 'draft';
    }
    
    function isResourceDraft() {
      return resource.data.status == 'draft';
    }

    function isTourOwner(tourPlanId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/tourPlans/$(tourPlanId)) &&
             get(/databases/$(database)/documents/tourPlans/$(tourPlanId)).data.guideId == request.auth.uid;
    }

    // Helper function to check if user is the guide for a booking
    function isBookingGuide(bookingData) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/tourInstances/$(bookingData.tourInstanceId)) &&
             get(/databases/$(database)/documents/tourInstances/$(bookingData.tourInstanceId)).data.guideId == request.auth.uid;
    }

    // Helper function to check if user is the guide for a tour plan (fallback)
    function isTourPlanGuide(tourPlanId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/tourPlans/$(tourPlanId)) &&
             get(/databases/$(database)/documents/tourPlans/$(tourPlanId)).data.guideId == request.auth.uid;
    }

    // Helper function to check if user is involved in a tour session
    function isSessionParticipant(sessionData) {
      return isAuthenticated() && 
             (request.auth.uid == sessionData.guideId || 
              request.auth.uid == sessionData.travelerId);
    }

    // Helper function to check if user is guide of a tour instance
    function isTourInstanceGuide(instanceData) {
      return isAuthenticated() && request.auth.uid == instanceData.guideId;
    }

    // Users collection: Allow public read for guide discovery, users can only write their own document
    match /users/{userId} {
      allow read: if true; // Public read for guide discovery and tour card display
      allow create: if isAuthenticated() && isOwner(userId);
      allow update, delete: if isAuthenticated() && isOwner(userId);
    }

    // Guides collection: users can only read/write their own guide profile
    match /guides/{guideId} {
      allow read: if true; // Public read for guide discovery
      allow create, update, delete: if isAuthenticated() && isOwner(guideId);

      // Guide availability subcollection
      match /availableTimes/{availableTimeId} {
        allow read: if true; // Public read for booking purposes
        allow create, update, delete: if isAuthenticated() && isOwner(guideId);
      }

      // Guide unavailable slots subcollection
      match /unavailableSlots/{slotId} {
        allow read: if true; // Public read for booking purposes
        allow create, update, delete: if isAuthenticated() && isOwner(guideId);
      }
    }

    // Tour Plans collection: Allow draft creation for authenticated users, published tours only for guides
    match /tourPlans/{tourPlanId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
                   (isDraft() || isGuide());
      allow update: if isAuthenticated() && isOwner(resource.data.guideId) &&
                   (isDraft() || isResourceDraft() || isGuide());
      allow delete: if isAuthenticated() && isOwner(resource.data.guideId);

      // Places subcollection: public read, only tour owner can manage
      match /places/{placeId} {
        allow read: if true; // Public read for tour discovery
        allow create, update, delete: if isTourOwner(tourPlanId);
      }
    }

    // Tour Instances collection: Enhanced permissions for tour lifecycle
    match /tourInstances/{instanceId} {
      // Public read for tour discovery and booking
      allow read: if true;
      
      // Guides can create tour instances for their own tours
      allow create: if isAuthenticated() && 
                   request.auth.uid == request.resource.data.guideId;
      
      // Guides can update their own tour instances, travelers can update for check-in
      allow update: if isAuthenticated() && 
                   (request.auth.uid == resource.data.guideId ||
                    // Allow travelers to update when checking in for tours
                    (request.resource.data.status in ['waiting_start', 'ongoing', 'completed']));
      
      // Only guides can delete their tour instances
      allow delete: if isAuthenticated() && 
                   request.auth.uid == resource.data.guideId;
    }

    // Bookings collection: Simplified permissions for tour experience
    match /bookings/{bookingId} {
      // Allow authenticated users to read bookings (simplified for tour experience)
      // This enables queries like "where tourInstanceId in [...]" and "where travelerId == ..."
      allow read: if isAuthenticated();
      
      // Only travelers can create bookings for themselves
      allow create: if isAuthenticated() && 
                   isOwner(request.resource.data.travelerId);
      
      // Allow authenticated users to update bookings (for tour lifecycle management)
      allow update: if isAuthenticated();
      
      // Allow authenticated users to delete bookings (simplified for tour management)
      allow delete: if isAuthenticated();
    }

    // Tour Sessions collection: Critical for real-time tour experience
    match /tourSessions/{sessionId} {
      // Allow authenticated users to read tour sessions (needed for booking queries)
      // Security is maintained through app logic and other collection rules
      allow read: if isAuthenticated();
      
      // Guides can create tour sessions when starting tours
      // Allow creation if user is authenticated and either:
      // 1. The guideId field matches the authenticated user, OR
      // 2. The user is verified as a guide in the users collection
      allow create: if isAuthenticated() && 
                   (request.auth.uid == request.resource.data.guideId ||
                    isGuide());
      
      // Both participants can update session status and progress
      allow update: if isAuthenticated();
      
      // Guides can end/delete tour sessions
      allow delete: if isAuthenticated();

      // Participant locations subcollection: Critical for real-time location sharing
      match /participantLocations/{participantId} {
        // All tour participants can read each other's locations
        allow read: if isAuthenticated();
        
        // Users can create/update their own location data
        allow create, update: if isAuthenticated();
        
        // Users can delete their own location data
        allow delete: if isAuthenticated();
      }
    }

    // Tour Progress tracking: Essential for tour navigation
    match /tourProgress/{tourInstanceId} {
      // Both guide and traveler need to read progress
      allow read: if isAuthenticated();
      
      // Guides can create and update tour progress
      allow create, update: if isAuthenticated();
      
      // Only guides can delete progress data
      allow delete: if isAuthenticated();
    }

    // Real-time location tracking during active tours
    match /userLocations/{locationId} {
      // Participants in active tours can read each other's locations
      allow read: if isAuthenticated();
      
      // Users can create/update their own location data
      allow create, update: if isAuthenticated() && 
                           isOwner(request.resource.data.userId);
      
      // Users can delete their own location data
      allow delete: if isAuthenticated() && 
                   isOwner(resource.data.userId);
    }

    // Tour Journals collection: Enhanced for tour experience
    match /tourJournals/{journalId} {
      // Public read for completed tour journals
      allow read: if true;
      
      // Travelers create journals during tours
      allow create: if isAuthenticated() && 
                   isOwner(request.resource.data.travelerId);
      
      // Journal owner can update
      allow update: if isAuthenticated() && 
                   isOwner(resource.data.travelerId);
      
      // Journal owner can delete
      allow delete: if isAuthenticated() && 
                   isOwner(resource.data.travelerId);

      // Journal entries subcollection
      match /entries/{entryId} {
        allow read: if true;
        allow create, update, delete: if isAuthenticated() && 
                                     isOwner(get(/databases/$(database)/documents/tourJournals/$(journalId)).data.travelerId);
      }
    }

    // Conversations collection: Communication between guides and travelers
    match /conversations/{conversationId} {
      allow read, write: if isAuthenticated() && 
                        (request.auth.uid == resource.data.guideId || 
                         request.auth.uid == resource.data.travelerId);
      allow create: if isAuthenticated() && 
                   (request.auth.uid == request.resource.data.guideId ||
                    request.auth.uid == request.resource.data.travelerId);

      // Messages subcollection
      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && 
                          (request.auth.uid == get(/databases/$(database)/documents/conversations/$(conversationId)).data.guideId ||
                           request.auth.uid == get(/databases/$(database)/documents/conversations/$(conversationId)).data.travelerId);
        allow create: if isAuthenticated() && 
                     isOwner(request.resource.data.senderId) &&
                     (request.auth.uid == get(/databases/$(database)/documents/conversations/$(conversationId)).data.guideId ||
                      request.auth.uid == get(/databases/$(database)/documents/conversations/$(conversationId)).data.travelerId);
      }
    }

    // Reviews collection: Public read, only reviewer can write
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isAuthenticated() && isOwner(request.resource.data.reviewerId);
      allow update, delete: if isAuthenticated() && isOwner(resource.data.reviewerId);
    }

    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}